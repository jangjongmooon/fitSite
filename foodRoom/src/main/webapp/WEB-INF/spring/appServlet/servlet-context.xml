<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<context:component-scan base-package="com.food.site"/>
	<context:component-scan base-package="com.dining.vo"/>
	<context:component-scan base-package="com.dining.dto"/>
	<context:component-scan base-package="com.dining.user"/>
	<context:component-scan base-package="com.dining.owner"/>
	<context:component-scan base-package="com.dining.admin"/>
	<context:component-scan base-package="com.dining.member"/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resource/**" location="/resource/" />
	<resources mapping="/css/**" location="/WEB-INF/views/css/" />
	<resources mapping="/img/**" location="C:\data\room_image" />
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order"  value="2" />
	</beans:bean>
	
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value="1"/>
	</beans:bean>

	<context:property-placeholder location="classpath:../config/email/email.properties" />
   <!-- 이메일 인증 관련 빈 등록 -->
   <beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <beans:property name="host" value="smtp.gmail.com" />
      <beans:property name="port" value="587" />
      <beans:property name="username" value="${email.account}" />
      <beans:property name="password" value="${email.password}" />
      <beans:property name="javaMailProperties">
         <beans:props>
                <beans:prop key="mail.transport.protocol">smtp</beans:prop>
                <beans:prop key="mail.smtp.auth">true</beans:prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <beans:prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</beans:prop>
                <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
                <beans:prop key="mail.debug">true</beans:prop>
                <beans:prop key="mail.smtp.ssl.trust">smtp.gmail.com</beans:prop>
             <beans:prop key="mail.smtp.ssl.protocols">TLSv1.2</beans:prop>
            </beans:props>
      </beans:property>  
   </beans:bean>
   
   
   
</beans:beans>
